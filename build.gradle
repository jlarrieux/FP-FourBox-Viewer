

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'pmd'




sourceCompatibility = 1.8


repositories {
    mavenCentral()
}


jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect{
            fileTree(dir: it,
                    exclude: ['com/fp/jeannius/jav/fp.okrdashboard.testhelper/**'])
        })
    }
}

task runTest{
    dependsOn test, jacocoTestReport

    doLast{
        File coverageReport = new File("${buildDir}/reports/jacoco/test/html/index.html")
        Desktop.getDesktop().open(coverageReport)
    }
}




dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.hibernate:hibernate-entitymanager:5.2+'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile 'com.jfoenix:jfoenix:1.+'
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.1.0.jre8'
    compile 'com.github.jlarrieux:numeric-validator:1.+'
    compileOnly 'org.projectlombok:lombok:1.+'



}

tasks.withType(FindBugs){
    ignoreFailures =true
    reports{
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(JDepend){
    reports{
        xml.enabled false
        text.enabled true
    }
}

tasks.withType(Pmd){
    ignoreFailures =true
    reports{
        xml.enabled false

    }
}



jar{
    baseName='FourBox'
    version ='0.9.4'
    exclude ('META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA','META-INF/*.txt', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/DEPENDENCIES','META-INF/ASL2.0')
    manifest{
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect{it.getName()},
                'Main-Class': 'com.fp.fourBoxViewer.main.Main'
        )


    }
    from {
        configurations.runtimeClasspath.collect{it.isDirectory()? it :zipTree(it)}
    }


}